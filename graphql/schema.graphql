type Query {
    user: User! @auth
}
type Mutation{
    updateUser(
        id: ID!,
        first_name: String,
        last_name: String,
        phone_no: String,
        linkedin: String,
        instagram: String,
        facebook: String,
        twitter: String,
        avatar: String,
        about: String,
    ): User @update
    updateEmail(
        email: String @rules(
            apply: ["string", "unique:users,email","email"],
            messages: {
                email: "Your email is not properly formatted",
                unique: "There's already a user registered with that email"
            })
    ): UserPayload @field(resolver: "App\\Http\\GraphQL\\Mutations\\UserMutator@updateEmail")
    updateName(
        name: String @rules(
            apply: ["string", "unique:users,name"],
            messages: {
                unique: "There's already a user registered with that username"
            })
    ): UserPayload @field(resolver: "App\\Http\\GraphQL\\Mutations\\UserMutator@updateName")
    updatePassword(
        current_password: String
        new_password: String  @rules(
             apply: ["string", "confirmed"],
             messages: {
                 unique: "New password and confirmation do not match"
             })
        new_password_confirmation: String
    ): UserPayload @field(resolver: "App\\Http\\GraphQL\\Mutations\\UserMutator@updatePassword")
}

#import schemas/user.graphql
