type Query {
    user: User! @auth
}
type Mutation{
    updateUser(
        id: ID!
        first_name: String @rules(
            apply: ["max:25"],
            messages: {
                max: "You've exceeded the 25 char limit",
            }),
        last_name: String @rules(
             apply: ["max:25"],
             messages: {
                 max: "You've exceeded the 25 char limit",
             }),
        phone_no: String @rules(
            apply: ["max:15"],
            messages: {
                max: "You've exceeded the 15 char limit",
            }),
        linkedin: String @rules(
            apply: ["max:20"],
            messages: {
                max: "You've exceeded the 20 char limit",
            }),
        instagram: String @rules(
             apply: ["max:20"],
             messages: {
                 max: "You've exceeded the 20 char limit",
             }),
        facebook: String @rules(
            apply: ["max:140"],
            messages: {
                max: "You've exceeded the 140 char limit",
            }),
        twitter: String @rules(
           apply: ["max:140"],
           messages: {
               max: "You've exceeded the 140 char limit",
           }),
        avatar: String! @rules(
            apply: ["string"]),
        about: String @rules(
            apply: ["max:140"],
            messages: {
                max: "You've exceeded the 140 char limit",
            }),
    ): User @update
    updateEmail(
        id: ID!
        email: String @rules(
            apply: ["string", "unique:users,email","email", "max:100"],
            messages: {
                max:        "Your email cannot be more than 100 characters"
                email: "Your email is not properly formatted",
                unique: "There's already a user registered with that email"
            })
    ): User @update
    updateName(
        id: ID!
        name: String @rules(
            apply: ["string", "unique:users,name", "max:15","alpha_dash"],
            messages: {
                max:        "Your username cannot be more than 15 characters"
                unique:     "There's already a user registered with that username"
                alpha_dash: "Only alpha-numeric characters, as well as dashes and underscores are allowed"
            })
    ): User @update
    updatePassword(
        current_password: String
        new_password: String  @rules(
             apply: ["string", "confirmed"],
             messages: {
                 unique: "New password and confirmation do not match"
             })
        new_password_confirmation: String
    ): UserPayload @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@updatePassword")
}

#import schemas/user.graphql
